//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './components/api-authorization/followIfLoginRedirect';

export class ClassesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getClasses(skip: number, take: number, orderBy: string | null | undefined, filterAttribute: string | null | undefined, filterValue: string | null | undefined): Promise<ClassDto> {
        let url_ = this.baseUrl + "/api/Classes?";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterAttribute !== undefined && filterAttribute !== null)
            url_ += "FilterAttribute=" + encodeURIComponent("" + filterAttribute) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClasses(_response);
        });
    }

    protected processGetClasses(response: Response): Promise<ClassDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClassDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClassDto>(null as any);
    }

    createClass(command: CreateClassCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Classes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateClass(_response);
        });
    }

    protected processCreateClass(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteClass(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteClass(_response);
        });
    }

    protected processDeleteClass(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateClass(id: number, command: UpdateClassCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Classes/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateClass(_response);
        });
    }

    protected processUpdateClass(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ClassesByCourseIdClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getClassesByCourseId(courseId: number, skip: number, take: number, orderBy: string | null | undefined, filterAttribute: string | null | undefined, filterValue: string | null | undefined): Promise<ClassDto> {
        let url_ = this.baseUrl + "/api/ClassesByCourseId?";
        if (courseId === undefined || courseId === null)
            throw new Error("The parameter 'courseId' must be defined and cannot be null.");
        else
            url_ += "CourseId=" + encodeURIComponent("" + courseId) + "&";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterAttribute !== undefined && filterAttribute !== null)
            url_ += "FilterAttribute=" + encodeURIComponent("" + filterAttribute) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClassesByCourseId(_response);
        });
    }

    protected processGetClassesByCourseId(response: Response): Promise<ClassDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClassDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClassDto>(null as any);
    }
}

export class ClassTypesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getClassTypes(): Promise<ClassTypeDto[]> {
        let url_ = this.baseUrl + "/api/ClassTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClassTypes(_response);
        });
    }

    protected processGetClassTypes(response: Response): Promise<ClassTypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClassTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClassTypeDto[]>(null as any);
    }
}

export class CourseByIdClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCourseById(id: number): Promise<CourseByIdDto> {
        let url_ = this.baseUrl + "/api/CourseById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourseById(_response);
        });
    }

    protected processGetCourseById(response: Response): Promise<CourseByIdDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CourseByIdDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourseByIdDto>(null as any);
    }
}

export class CoursesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCourses(skip: number, take: number, orderBy: string | null | undefined, filterAttribute: string | null | undefined, filterValue: string | null | undefined): Promise<CourseDto> {
        let url_ = this.baseUrl + "/api/Courses?";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterAttribute !== undefined && filterAttribute !== null)
            url_ += "FilterAttribute=" + encodeURIComponent("" + filterAttribute) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourses(_response);
        });
    }

    protected processGetCourses(response: Response): Promise<CourseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CourseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourseDto>(null as any);
    }

    createCourse(command: CreateCourseCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Courses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCourse(_response);
        });
    }

    protected processCreateCourse(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteCourse(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Courses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCourse(_response);
        });
    }

    protected processDeleteCourse(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateCourse(id: number, command: UpdateCourseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Courses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCourse(_response);
        });
    }

    protected processUpdateCourse(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CoursesFKClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getCoursesFK(): Promise<CoursesFKDto[]> {
        let url_ = this.baseUrl + "/api/CoursesFK";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoursesFK(_response);
        });
    }

    protected processGetCoursesFK(response: Response): Promise<CoursesFKDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CoursesFKDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoursesFKDto[]>(null as any);
    }
}

export class CurrentUserInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserInfo(): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/CurrentUserInfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserInfo(_response);
        });
    }

    protected processGetUserInfo(response: Response): Promise<UserDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(null as any);
    }
}

export class DepartmentsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDepartments(inlineCount: string | null | undefined, skip: number | null | undefined, top: number | null | undefined, orderBy: string | null | undefined, filterParams: string | null | undefined, filterValue: string | null | undefined): Promise<DepartmentDto> {
        let url_ = this.baseUrl + "/api/Departments?";
        if (inlineCount !== undefined && inlineCount !== null)
            url_ += "InlineCount=" + encodeURIComponent("" + inlineCount) + "&";
        if (skip !== undefined && skip !== null)
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (top !== undefined && top !== null)
            url_ += "Top=" + encodeURIComponent("" + top) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterParams !== undefined && filterParams !== null)
            url_ += "FilterParams=" + encodeURIComponent("" + filterParams) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDepartments(_response);
        });
    }

    protected processGetDepartments(response: Response): Promise<DepartmentDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DepartmentDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DepartmentDto>(null as any);
    }

    createDepartment(command: CreateDepartmentCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Departments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateDepartment(_response);
        });
    }

    protected processCreateDepartment(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteDepartment(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Departments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDepartment(_response);
        });
    }

    protected processDeleteDepartment(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateDeparment(id: number, command: UpdateDepartmentCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Departments/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateDeparment(_response);
        });
    }

    protected processUpdateDeparment(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DepartmentsFKRefClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDepartmentsForFKRef(): Promise<DepartmentDtoForFKRef[]> {
        let url_ = this.baseUrl + "/api/DepartmentsFKRef";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDepartmentsForFKRef(_response);
        });
    }

    protected processGetDepartmentsForFKRef(response: Response): Promise<DepartmentDtoForFKRef[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepartmentDtoForFKRef.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DepartmentDtoForFKRef[]>(null as any);
    }
}

export class PrerequisiteCoursesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPrerequisiteCourses(): Promise<PrerequisiteCourseDto> {
        let url_ = this.baseUrl + "/api/PrerequisiteCourses";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPrerequisiteCourses(_response);
        });
    }

    protected processGetPrerequisiteCourses(response: Response): Promise<PrerequisiteCourseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PrerequisiteCourseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrerequisiteCourseDto>(null as any);
    }

    createCoursePrerequisite(command: CreateCoursePrerequisiteCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/PrerequisiteCourses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoursePrerequisite(_response);
        });
    }

    protected processCreateCoursePrerequisite(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteCoursePrerequisite(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/PrerequisiteCourses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCoursePrerequisite(_response);
        });
    }

    protected processDeleteCoursePrerequisite(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PrerequisiteCoursesByCourseIdClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPrerequisiteCoursesByCourseId(courseId: number, skip: number, take: number, orderBy: string | null | undefined, filterAttribute: string | null | undefined, filterValue: string | null | undefined): Promise<PrerequisiteCourseDto> {
        let url_ = this.baseUrl + "/api/PrerequisiteCoursesByCourseId?";
        if (courseId === undefined || courseId === null)
            throw new Error("The parameter 'courseId' must be defined and cannot be null.");
        else
            url_ += "CourseId=" + encodeURIComponent("" + courseId) + "&";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterAttribute !== undefined && filterAttribute !== null)
            url_ += "FilterAttribute=" + encodeURIComponent("" + filterAttribute) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPrerequisiteCoursesByCourseId(_response);
        });
    }

    protected processGetPrerequisiteCoursesByCourseId(response: Response): Promise<PrerequisiteCourseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PrerequisiteCourseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PrerequisiteCourseDto>(null as any);
    }
}

export class RegistrationSchedulesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getRegistrationSchedules(skip: number, take: number, orderBy: string | null | undefined, filterAttribute: string | null | undefined, filterValue: string | null | undefined, filterOperator: string | null | undefined): Promise<RegistrationScheduleDto> {
        let url_ = this.baseUrl + "/api/RegistrationSchedules?";
        if (skip === undefined || skip === null)
            throw new Error("The parameter 'skip' must be defined and cannot be null.");
        else
            url_ += "Skip=" + encodeURIComponent("" + skip) + "&";
        if (take === undefined || take === null)
            throw new Error("The parameter 'take' must be defined and cannot be null.");
        else
            url_ += "Take=" + encodeURIComponent("" + take) + "&";
        if (orderBy !== undefined && orderBy !== null)
            url_ += "OrderBy=" + encodeURIComponent("" + orderBy) + "&";
        if (filterAttribute !== undefined && filterAttribute !== null)
            url_ += "FilterAttribute=" + encodeURIComponent("" + filterAttribute) + "&";
        if (filterValue !== undefined && filterValue !== null)
            url_ += "FilterValue=" + encodeURIComponent("" + filterValue) + "&";
        if (filterOperator !== undefined && filterOperator !== null)
            url_ += "FilterOperator=" + encodeURIComponent("" + filterOperator) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRegistrationSchedules(_response);
        });
    }

    protected processGetRegistrationSchedules(response: Response): Promise<RegistrationScheduleDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegistrationScheduleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RegistrationScheduleDto>(null as any);
    }

    createRegistrationSchedule(command: CreateRegistrationScheduleCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/RegistrationSchedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateRegistrationSchedule(_response);
        });
    }

    protected processCreateRegistrationSchedule(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteRegistrationSchedule(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/RegistrationSchedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRegistrationSchedule(_response);
        });
    }

    protected processDeleteRegistrationSchedule(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateRegistrationSchedule(id: number, command: UpdateRegistrationScheduleCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/RegistrationSchedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateRegistrationSchedule(_response);
        });
    }

    protected processUpdateRegistrationSchedule(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class SemestersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getSemesters(): Promise<SemesterDto[]> {
        let url_ = this.baseUrl + "/api/Semesters";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSemesters(_response);
        });
    }

    protected processGetSemesters(response: Response): Promise<SemesterDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SemesterDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SemesterDto[]>(null as any);
    }

    createSemester(command: CreateSemesterCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Semesters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSemester(_response);
        });
    }

    protected processCreateSemester(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    deleteSemester(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Semesters/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSemester(_response);
        });
    }

    protected processDeleteSemester(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateSemester(id: number, command: UpdateSemesterCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Semesters/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSemester(_response);
        });
    }

    protected processUpdateSemester(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TodoItemsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoItemsWithPagination(listId: number, pageNumber: number, pageSize: number): Promise<PaginatedListOfTodoItemBriefDto> {
        let url_ = this.baseUrl + "/api/TodoItems?";
        if (listId === undefined || listId === null)
            throw new Error("The parameter 'listId' must be defined and cannot be null.");
        else
            url_ += "ListId=" + encodeURIComponent("" + listId) + "&";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTodoItemsWithPagination(_response);
        });
    }

    protected processGetTodoItemsWithPagination(response: Response): Promise<PaginatedListOfTodoItemBriefDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfTodoItemBriefDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfTodoItemBriefDto>(null as any);
    }

    createTodoItem(command: CreateTodoItemCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TodoItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTodoItem(_response);
        });
    }

    protected processCreateTodoItem(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateTodoItem(id: number, command: UpdateTodoItemCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItem(_response);
        });
    }

    protected processUpdateTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteTodoItem(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTodoItem(_response);
        });
    }

    protected processDeleteTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateTodoItemDetail(id: number, command: UpdateTodoItemDetailCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/UpdateDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItemDetail(_response);
        });
    }

    protected processUpdateTodoItemDetail(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TodoListsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoLists(): Promise<TodosVm> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTodoLists(_response);
        });
    }

    protected processGetTodoLists(response: Response): Promise<TodosVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodosVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodosVm>(null as any);
    }

    createTodoList(command: CreateTodoListCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTodoList(_response);
        });
    }

    protected processCreateTodoList(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateTodoList(id: number, command: UpdateTodoListCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoList(_response);
        });
    }

    protected processUpdateTodoList(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteTodoList(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTodoList(_response);
        });
    }

    protected processDeleteTodoList(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UserClassesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserInClass(): Promise<UserClassDto[]> {
        let url_ = this.baseUrl + "/api/UserClasses";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserInClass(_response);
        });
    }

    protected processGetUserInClass(response: Response): Promise<UserClassDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserClassDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserClassDto[]>(null as any);
    }

    addUserToClass(command: AddUserToClassCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/UserClasses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddUserToClass(_response);
        });
    }

    protected processAddUserToClass(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    removeUserFromClass(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/UserClasses/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoveUserFromClass(_response);
        });
    }

    protected processRemoveUserFromClass(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UsersClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getUserList(): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserList(_response);
        });
    }

    protected processGetUserList(response: Response): Promise<UserDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto[]>(null as any);
    }
}

export class WeatherForecastsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getWeatherForecasts(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecasts(_response);
        });
    }

    protected processGetWeatherForecasts(response: Response): Promise<WeatherForecast[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class ClassDto implements IClassDto {
    result?: ClassResult[];
    count?: number;

    constructor(data?: IClassDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(ClassResult.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): ClassDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IClassDto {
    result?: ClassResult[];
    count?: number;
}

export class ClassResult implements IClassResult {
    id?: number;
    courseId?: number;
    classTypeId?: number;
    registrationScheduleId?: number;
    classCode?: string | undefined;
    departmentName?: string | undefined;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;
    canBeRegistered?: boolean;
    classType?: ClassType | undefined;
    course?: Course | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    userClasses?: UserClass[];

    constructor(data?: IClassResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courseId = _data["courseId"];
            this.classTypeId = _data["classTypeId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.classCode = _data["classCode"];
            this.departmentName = _data["departmentName"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startPeriod = _data["startPeriod"];
            this.endPeriod = _data["endPeriod"];
            this.capacity = _data["capacity"];
            this.canBeRegistered = _data["canBeRegistered"];
            this.classType = _data["classType"] ? ClassType.fromJS(_data["classType"]) : <any>undefined;
            this.course = _data["course"] ? Course.fromJS(_data["course"]) : <any>undefined;
            this.registrationSchedule = _data["registrationSchedule"] ? RegistrationSchedule.fromJS(_data["registrationSchedule"]) : <any>undefined;
            if (Array.isArray(_data["userClasses"])) {
                this.userClasses = [] as any;
                for (let item of _data["userClasses"])
                    this.userClasses!.push(UserClass.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClassResult {
        data = typeof data === 'object' ? data : {};
        let result = new ClassResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courseId"] = this.courseId;
        data["classTypeId"] = this.classTypeId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["classCode"] = this.classCode;
        data["departmentName"] = this.departmentName;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startPeriod"] = this.startPeriod;
        data["endPeriod"] = this.endPeriod;
        data["capacity"] = this.capacity;
        data["canBeRegistered"] = this.canBeRegistered;
        data["classType"] = this.classType ? this.classType.toJSON() : <any>undefined;
        data["course"] = this.course ? this.course.toJSON() : <any>undefined;
        data["registrationSchedule"] = this.registrationSchedule ? this.registrationSchedule.toJSON() : <any>undefined;
        if (Array.isArray(this.userClasses)) {
            data["userClasses"] = [];
            for (let item of this.userClasses)
                data["userClasses"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClassResult {
    id?: number;
    courseId?: number;
    classTypeId?: number;
    registrationScheduleId?: number;
    classCode?: string | undefined;
    departmentName?: string | undefined;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;
    canBeRegistered?: boolean;
    classType?: ClassType | undefined;
    course?: Course | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    userClasses?: UserClass[];
}

export abstract class BaseEntity implements IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static override fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;
}

export class ClassType extends BaseAuditableEntity implements IClassType {
    type?: string;
    class?: Class[];

    constructor(data?: IClassType) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
            if (Array.isArray(_data["class"])) {
                this.class = [] as any;
                for (let item of _data["class"])
                    this.class!.push(Class.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ClassType {
        data = typeof data === 'object' ? data : {};
        let result = new ClassType();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (Array.isArray(this.class)) {
            data["class"] = [];
            for (let item of this.class)
                data["class"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IClassType extends IBaseAuditableEntity {
    type?: string;
    class?: Class[];
}

export class Class extends BaseAuditableEntity implements IClass {
    courseId?: number | undefined;
    classTypeId?: number | undefined;
    registrationScheduleId?: number | undefined;
    classCode?: string;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    credit?: number;
    capacity?: number;
    canBeRegistered?: boolean;
    course?: Course;
    classType?: ClassType;
    registrationSchedule?: RegistrationSchedule;
    userClasses?: UserClass[];

    constructor(data?: IClass) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.courseId = _data["courseId"];
            this.classTypeId = _data["classTypeId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.classCode = _data["classCode"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startPeriod = _data["startPeriod"];
            this.endPeriod = _data["endPeriod"];
            this.credit = _data["credit"];
            this.capacity = _data["capacity"];
            this.canBeRegistered = _data["canBeRegistered"];
            this.course = _data["course"] ? Course.fromJS(_data["course"]) : <any>undefined;
            this.classType = _data["classType"] ? ClassType.fromJS(_data["classType"]) : <any>undefined;
            this.registrationSchedule = _data["registrationSchedule"] ? RegistrationSchedule.fromJS(_data["registrationSchedule"]) : <any>undefined;
            if (Array.isArray(_data["userClasses"])) {
                this.userClasses = [] as any;
                for (let item of _data["userClasses"])
                    this.userClasses!.push(UserClass.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Class {
        data = typeof data === 'object' ? data : {};
        let result = new Class();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseId"] = this.courseId;
        data["classTypeId"] = this.classTypeId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["classCode"] = this.classCode;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startPeriod"] = this.startPeriod;
        data["endPeriod"] = this.endPeriod;
        data["credit"] = this.credit;
        data["capacity"] = this.capacity;
        data["canBeRegistered"] = this.canBeRegistered;
        data["course"] = this.course ? this.course.toJSON() : <any>undefined;
        data["classType"] = this.classType ? this.classType.toJSON() : <any>undefined;
        data["registrationSchedule"] = this.registrationSchedule ? this.registrationSchedule.toJSON() : <any>undefined;
        if (Array.isArray(this.userClasses)) {
            data["userClasses"] = [];
            for (let item of this.userClasses)
                data["userClasses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IClass extends IBaseAuditableEntity {
    courseId?: number | undefined;
    classTypeId?: number | undefined;
    registrationScheduleId?: number | undefined;
    classCode?: string;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    credit?: number;
    capacity?: number;
    canBeRegistered?: boolean;
    course?: Course;
    classType?: ClassType;
    registrationSchedule?: RegistrationSchedule;
    userClasses?: UserClass[];
}

export class Course extends BaseAuditableEntity implements ICourse {
    departmentId?: number | undefined;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
    department?: Department;
    classes?: Class[];
    current?: PrerequisiteCourse[];
    prerequisites?: PrerequisiteCourse[];

    constructor(data?: ICourse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.departmentId = _data["departmentId"];
            this.courseCode = _data["courseCode"];
            this.courseName = _data["courseName"];
            this.description = _data["description"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
            if (Array.isArray(_data["classes"])) {
                this.classes = [] as any;
                for (let item of _data["classes"])
                    this.classes!.push(Class.fromJS(item));
            }
            if (Array.isArray(_data["current"])) {
                this.current = [] as any;
                for (let item of _data["current"])
                    this.current!.push(PrerequisiteCourse.fromJS(item));
            }
            if (Array.isArray(_data["prerequisites"])) {
                this.prerequisites = [] as any;
                for (let item of _data["prerequisites"])
                    this.prerequisites!.push(PrerequisiteCourse.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Course {
        data = typeof data === 'object' ? data : {};
        let result = new Course();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId;
        data["courseCode"] = this.courseCode;
        data["courseName"] = this.courseName;
        data["description"] = this.description;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        if (Array.isArray(this.classes)) {
            data["classes"] = [];
            for (let item of this.classes)
                data["classes"].push(item.toJSON());
        }
        if (Array.isArray(this.current)) {
            data["current"] = [];
            for (let item of this.current)
                data["current"].push(item.toJSON());
        }
        if (Array.isArray(this.prerequisites)) {
            data["prerequisites"] = [];
            for (let item of this.prerequisites)
                data["prerequisites"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICourse extends IBaseAuditableEntity {
    departmentId?: number | undefined;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
    department?: Department;
    classes?: Class[];
    current?: PrerequisiteCourse[];
    prerequisites?: PrerequisiteCourse[];
}

export class Department extends BaseAuditableEntity implements IDepartment {
    shortName?: string;
    fullName?: string;
    description?: string | undefined;
    courses?: Course[];

    constructor(data?: IDepartment) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
            if (Array.isArray(_data["courses"])) {
                this.courses = [] as any;
                for (let item of _data["courses"])
                    this.courses!.push(Course.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Department {
        data = typeof data === 'object' ? data : {};
        let result = new Department();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        if (Array.isArray(this.courses)) {
            data["courses"] = [];
            for (let item of this.courses)
                data["courses"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IDepartment extends IBaseAuditableEntity {
    shortName?: string;
    fullName?: string;
    description?: string | undefined;
    courses?: Course[];
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class PrerequisiteCourse extends BaseAuditableEntity implements IPrerequisiteCourse {
    courseId?: number | undefined;
    prerequisiteCourseId?: number | undefined;
    requirePassed?: boolean;
    course?: Course;
    prerequisite?: Course;

    constructor(data?: IPrerequisiteCourse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.courseId = _data["courseId"];
            this.prerequisiteCourseId = _data["prerequisiteCourseId"];
            this.requirePassed = _data["requirePassed"];
            this.course = _data["course"] ? Course.fromJS(_data["course"]) : <any>undefined;
            this.prerequisite = _data["prerequisite"] ? Course.fromJS(_data["prerequisite"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PrerequisiteCourse {
        data = typeof data === 'object' ? data : {};
        let result = new PrerequisiteCourse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseId"] = this.courseId;
        data["prerequisiteCourseId"] = this.prerequisiteCourseId;
        data["requirePassed"] = this.requirePassed;
        data["course"] = this.course ? this.course.toJSON() : <any>undefined;
        data["prerequisite"] = this.prerequisite ? this.prerequisite.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPrerequisiteCourse extends IBaseAuditableEntity {
    courseId?: number | undefined;
    prerequisiteCourseId?: number | undefined;
    requirePassed?: boolean;
    course?: Course;
    prerequisite?: Course;
}

export class RegistrationSchedule extends BaseAuditableEntity implements IRegistrationSchedule {
    name?: string;
    startDate?: Date;
    endDate?: Date;
    feePerCredit?: number;
    classes?: Class[];
    userClasses?: UserClass[];
    tuitionFees?: TuitionFee[];

    constructor(data?: IRegistrationSchedule) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.feePerCredit = _data["feePerCredit"];
            if (Array.isArray(_data["classes"])) {
                this.classes = [] as any;
                for (let item of _data["classes"])
                    this.classes!.push(Class.fromJS(item));
            }
            if (Array.isArray(_data["userClasses"])) {
                this.userClasses = [] as any;
                for (let item of _data["userClasses"])
                    this.userClasses!.push(UserClass.fromJS(item));
            }
            if (Array.isArray(_data["tuitionFees"])) {
                this.tuitionFees = [] as any;
                for (let item of _data["tuitionFees"])
                    this.tuitionFees!.push(TuitionFee.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): RegistrationSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationSchedule();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["feePerCredit"] = this.feePerCredit;
        if (Array.isArray(this.classes)) {
            data["classes"] = [];
            for (let item of this.classes)
                data["classes"].push(item.toJSON());
        }
        if (Array.isArray(this.userClasses)) {
            data["userClasses"] = [];
            for (let item of this.userClasses)
                data["userClasses"].push(item.toJSON());
        }
        if (Array.isArray(this.tuitionFees)) {
            data["tuitionFees"] = [];
            for (let item of this.tuitionFees)
                data["tuitionFees"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRegistrationSchedule extends IBaseAuditableEntity {
    name?: string;
    startDate?: Date;
    endDate?: Date;
    feePerCredit?: number;
    classes?: Class[];
    userClasses?: UserClass[];
    tuitionFees?: TuitionFee[];
}

export class UserClass extends BaseAuditableEntity implements IUserClass {
    classId?: number | undefined;
    registrationScheduleId?: number | undefined;
    userId?: number | undefined;
    passed?: boolean;
    class?: Class | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    user?: User | undefined;

    constructor(data?: IUserClass) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.classId = _data["classId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.userId = _data["userId"];
            this.passed = _data["passed"];
            this.class = _data["class"] ? Class.fromJS(_data["class"]) : <any>undefined;
            this.registrationSchedule = _data["registrationSchedule"] ? RegistrationSchedule.fromJS(_data["registrationSchedule"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UserClass {
        data = typeof data === 'object' ? data : {};
        let result = new UserClass();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classId"] = this.classId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["userId"] = this.userId;
        data["passed"] = this.passed;
        data["class"] = this.class ? this.class.toJSON() : <any>undefined;
        data["registrationSchedule"] = this.registrationSchedule ? this.registrationSchedule.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserClass extends IBaseAuditableEntity {
    classId?: number | undefined;
    registrationScheduleId?: number | undefined;
    userId?: number | undefined;
    passed?: boolean;
    class?: Class | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    user?: User | undefined;
}

export class User extends BaseAuditableEntity implements IUser {
    userName?: string | undefined;
    email?: string | undefined;
    departmentId?: number | undefined;
    department?: Department | undefined;
    userClasses?: UserClass[];
    tuitionFee?: TuitionFee[];
    roles?: string[];

    constructor(data?: IUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
            if (Array.isArray(_data["userClasses"])) {
                this.userClasses = [] as any;
                for (let item of _data["userClasses"])
                    this.userClasses!.push(UserClass.fromJS(item));
            }
            if (Array.isArray(_data["tuitionFee"])) {
                this.tuitionFee = [] as any;
                for (let item of _data["tuitionFee"])
                    this.tuitionFee!.push(TuitionFee.fromJS(item));
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        if (Array.isArray(this.userClasses)) {
            data["userClasses"] = [];
            for (let item of this.userClasses)
                data["userClasses"].push(item.toJSON());
        }
        if (Array.isArray(this.tuitionFee)) {
            data["tuitionFee"] = [];
            for (let item of this.tuitionFee)
                data["tuitionFee"].push(item.toJSON());
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IUser extends IBaseAuditableEntity {
    userName?: string | undefined;
    email?: string | undefined;
    departmentId?: number | undefined;
    department?: Department | undefined;
    userClasses?: UserClass[];
    tuitionFee?: TuitionFee[];
    roles?: string[];
}

export class TuitionFee extends BaseAuditableEntity implements ITuitionFee {
    totalFee?: number;
    registrationScheduleId?: number | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    user?: User | undefined;

    constructor(data?: ITuitionFee) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.totalFee = _data["totalFee"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.registrationSchedule = _data["registrationSchedule"] ? RegistrationSchedule.fromJS(_data["registrationSchedule"]) : <any>undefined;
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): TuitionFee {
        data = typeof data === 'object' ? data : {};
        let result = new TuitionFee();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalFee"] = this.totalFee;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["registrationSchedule"] = this.registrationSchedule ? this.registrationSchedule.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ITuitionFee extends IBaseAuditableEntity {
    totalFee?: number;
    registrationScheduleId?: number | undefined;
    registrationSchedule?: RegistrationSchedule | undefined;
    user?: User | undefined;
}

export class CreateClassCommand implements ICreateClassCommand {
    courseId?: number;
    classCode?: string;
    classTypeId?: number;
    registrationScheduleId?: number;
    credit?: number;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;

    constructor(data?: ICreateClassCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courseId = _data["courseId"];
            this.classCode = _data["classCode"];
            this.classTypeId = _data["classTypeId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.credit = _data["credit"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startPeriod = _data["startPeriod"];
            this.endPeriod = _data["endPeriod"];
            this.capacity = _data["capacity"];
        }
    }

    static fromJS(data: any): CreateClassCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClassCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseId"] = this.courseId;
        data["classCode"] = this.classCode;
        data["classTypeId"] = this.classTypeId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["credit"] = this.credit;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startPeriod"] = this.startPeriod;
        data["endPeriod"] = this.endPeriod;
        data["capacity"] = this.capacity;
        return data;
    }
}

export interface ICreateClassCommand {
    courseId?: number;
    classCode?: string;
    classTypeId?: number;
    registrationScheduleId?: number;
    credit?: number;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;
}

export class UpdateClassCommand implements IUpdateClassCommand {
    id?: number;
    courseId?: number;
    classTypeId?: number;
    registrationScheduleId?: number;
    classCode?: string;
    credit?: number;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;

    constructor(data?: IUpdateClassCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courseId = _data["courseId"];
            this.classTypeId = _data["classTypeId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.classCode = _data["classCode"];
            this.credit = _data["credit"];
            this.dayOfWeek = _data["dayOfWeek"];
            this.startPeriod = _data["startPeriod"];
            this.endPeriod = _data["endPeriod"];
            this.capacity = _data["capacity"];
        }
    }

    static fromJS(data: any): UpdateClassCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClassCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courseId"] = this.courseId;
        data["classTypeId"] = this.classTypeId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["classCode"] = this.classCode;
        data["credit"] = this.credit;
        data["dayOfWeek"] = this.dayOfWeek;
        data["startPeriod"] = this.startPeriod;
        data["endPeriod"] = this.endPeriod;
        data["capacity"] = this.capacity;
        return data;
    }
}

export interface IUpdateClassCommand {
    id?: number;
    courseId?: number;
    classTypeId?: number;
    registrationScheduleId?: number;
    classCode?: string;
    credit?: number;
    dayOfWeek?: number;
    startPeriod?: number;
    endPeriod?: number;
    capacity?: number;
}

export class ClassTypeDto implements IClassTypeDto {
    classTypeId?: number;
    type?: string;

    constructor(data?: IClassTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classTypeId = _data["classTypeId"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ClassTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClassTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classTypeId"] = this.classTypeId;
        data["type"] = this.type;
        return data;
    }
}

export interface IClassTypeDto {
    classTypeId?: number;
    type?: string;
}

export class CourseByIdDto implements ICourseByIdDto {
    id?: number;
    courseCode?: string;
    courseName?: string;
    credit?: number;
    fee?: number;
    description?: string | undefined;
    department?: Department | undefined;

    constructor(data?: ICourseByIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courseCode = _data["courseCode"];
            this.courseName = _data["courseName"];
            this.credit = _data["credit"];
            this.fee = _data["fee"];
            this.description = _data["description"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CourseByIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourseByIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courseCode"] = this.courseCode;
        data["courseName"] = this.courseName;
        data["credit"] = this.credit;
        data["fee"] = this.fee;
        data["description"] = this.description;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICourseByIdDto {
    id?: number;
    courseCode?: string;
    courseName?: string;
    credit?: number;
    fee?: number;
    description?: string | undefined;
    department?: Department | undefined;
}

export class CourseDto implements ICourseDto {
    result?: CourseResult[];
    count?: number;

    constructor(data?: ICourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(CourseResult.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): CourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface ICourseDto {
    result?: CourseResult[];
    count?: number;
}

export class CourseResult implements ICourseResult {
    id?: number;
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
    department?: Department | undefined;

    constructor(data?: ICourseResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departmentId = _data["departmentId"];
            this.courseCode = _data["courseCode"];
            this.courseName = _data["courseName"];
            this.description = _data["description"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CourseResult {
        data = typeof data === 'object' ? data : {};
        let result = new CourseResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departmentId"] = this.departmentId;
        data["courseCode"] = this.courseCode;
        data["courseName"] = this.courseName;
        data["description"] = this.description;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICourseResult {
    id?: number;
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
    department?: Department | undefined;
}

export class CreateCourseCommand implements ICreateCourseCommand {
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;

    constructor(data?: ICreateCourseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.departmentId = _data["departmentId"];
            this.courseCode = _data["courseCode"];
            this.courseName = _data["courseName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateCourseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId;
        data["courseCode"] = this.courseCode;
        data["courseName"] = this.courseName;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateCourseCommand {
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
}

export class UpdateCourseCommand implements IUpdateCourseCommand {
    id?: number;
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;

    constructor(data?: IUpdateCourseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departmentId = _data["departmentId"];
            this.courseCode = _data["courseCode"];
            this.courseName = _data["courseName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateCourseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departmentId"] = this.departmentId;
        data["courseCode"] = this.courseCode;
        data["courseName"] = this.courseName;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateCourseCommand {
    id?: number;
    departmentId?: number;
    courseCode?: string;
    courseName?: string;
    description?: string | undefined;
}

export class CoursesFKDto implements ICoursesFKDto {
    prerequisiteCourseId?: number;
    courseName?: string;
    description?: string | undefined;
    department?: Department | undefined;

    constructor(data?: ICoursesFKDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.prerequisiteCourseId = _data["prerequisiteCourseId"];
            this.courseName = _data["courseName"];
            this.description = _data["description"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CoursesFKDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoursesFKDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prerequisiteCourseId"] = this.prerequisiteCourseId;
        data["courseName"] = this.courseName;
        data["description"] = this.description;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICoursesFKDto {
    prerequisiteCourseId?: number;
    courseName?: string;
    description?: string | undefined;
    department?: Department | undefined;
}

export class UserDto implements IUserDto {
    id?: number;
    userName?: string | undefined;
    email?: string | undefined;
    departmentId?: number | undefined;
    department?: Department | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? Department.fromJS(_data["department"]) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUserDto {
    id?: number;
    userName?: string | undefined;
    email?: string | undefined;
    departmentId?: number | undefined;
    department?: Department | undefined;
    roles?: string[] | undefined;
}

export class DepartmentDto implements IDepartmentDto {
    result?: Result[];
    count?: number;

    constructor(data?: IDepartmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(Result.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): DepartmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IDepartmentDto {
    result?: Result[];
    count?: number;
}

export class Result implements IResult {
    id?: number;
    shortName?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface IResult {
    id?: number;
    shortName?: string | undefined;
    fullName?: string | undefined;
}

export class CreateDepartmentCommand implements ICreateDepartmentCommand {
    shortName?: string;
    fullName?: string;
    description?: string | undefined;

    constructor(data?: ICreateDepartmentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateDepartmentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDepartmentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateDepartmentCommand {
    shortName?: string;
    fullName?: string;
    description?: string | undefined;
}

export class UpdateDepartmentCommand implements IUpdateDepartmentCommand {
    id?: number;
    shortName?: string;
    fullName?: string;
    description?: string | undefined;

    constructor(data?: IUpdateDepartmentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shortName = _data["shortName"];
            this.fullName = _data["fullName"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateDepartmentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDepartmentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shortName"] = this.shortName;
        data["fullName"] = this.fullName;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateDepartmentCommand {
    id?: number;
    shortName?: string;
    fullName?: string;
    description?: string | undefined;
}

export class DepartmentDtoForFKRef implements IDepartmentDtoForFKRef {
    departmentId?: number;
    departmentName?: string;

    constructor(data?: IDepartmentDtoForFKRef) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.departmentId = _data["departmentId"];
            this.departmentName = _data["departmentName"];
        }
    }

    static fromJS(data: any): DepartmentDtoForFKRef {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentDtoForFKRef();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentId"] = this.departmentId;
        data["departmentName"] = this.departmentName;
        return data;
    }
}

export interface IDepartmentDtoForFKRef {
    departmentId?: number;
    departmentName?: string;
}

export class PrerequisiteCourseDto implements IPrerequisiteCourseDto {
    result?: PrerequisiteCoursesResult[];
    count?: number;

    constructor(data?: IPrerequisiteCourseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(PrerequisiteCoursesResult.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): PrerequisiteCourseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrerequisiteCourseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IPrerequisiteCourseDto {
    result?: PrerequisiteCoursesResult[];
    count?: number;
}

export class PrerequisiteCoursesResult implements IPrerequisiteCoursesResult {
    id?: number;
    courseId?: number;
    course?: Course | undefined;
    prerequisiteCourseId?: number;
    prerequisite?: Course | undefined;
    requirePassed?: boolean;

    constructor(data?: IPrerequisiteCoursesResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courseId = _data["courseId"];
            this.course = _data["course"] ? Course.fromJS(_data["course"]) : <any>undefined;
            this.prerequisiteCourseId = _data["prerequisiteCourseId"];
            this.prerequisite = _data["prerequisite"] ? Course.fromJS(_data["prerequisite"]) : <any>undefined;
            this.requirePassed = _data["requirePassed"];
        }
    }

    static fromJS(data: any): PrerequisiteCoursesResult {
        data = typeof data === 'object' ? data : {};
        let result = new PrerequisiteCoursesResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courseId"] = this.courseId;
        data["course"] = this.course ? this.course.toJSON() : <any>undefined;
        data["prerequisiteCourseId"] = this.prerequisiteCourseId;
        data["prerequisite"] = this.prerequisite ? this.prerequisite.toJSON() : <any>undefined;
        data["requirePassed"] = this.requirePassed;
        return data;
    }
}

export interface IPrerequisiteCoursesResult {
    id?: number;
    courseId?: number;
    course?: Course | undefined;
    prerequisiteCourseId?: number;
    prerequisite?: Course | undefined;
    requirePassed?: boolean;
}

export class CreateCoursePrerequisiteCommand implements ICreateCoursePrerequisiteCommand {
    courseId?: number | undefined;
    prerequisiteCourseId?: number | undefined;
    requirePassed?: boolean;

    constructor(data?: ICreateCoursePrerequisiteCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courseId = _data["courseId"];
            this.prerequisiteCourseId = _data["prerequisiteCourseId"];
            this.requirePassed = _data["requirePassed"];
        }
    }

    static fromJS(data: any): CreateCoursePrerequisiteCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoursePrerequisiteCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courseId"] = this.courseId;
        data["prerequisiteCourseId"] = this.prerequisiteCourseId;
        data["requirePassed"] = this.requirePassed;
        return data;
    }
}

export interface ICreateCoursePrerequisiteCommand {
    courseId?: number | undefined;
    prerequisiteCourseId?: number | undefined;
    requirePassed?: boolean;
}

export class RegistrationScheduleDto implements IRegistrationScheduleDto {
    result?: RegistrationScheduleResult[];
    count?: number;

    constructor(data?: IRegistrationScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(RegistrationScheduleResult.fromJS(item));
            }
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): RegistrationScheduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        data["count"] = this.count;
        return data;
    }
}

export interface IRegistrationScheduleDto {
    result?: RegistrationScheduleResult[];
    count?: number;
}

export class RegistrationScheduleResult implements IRegistrationScheduleResult {
    id?: number;
    name?: string;
    startDate?: Date;
    endDate?: Date;
    feePerCredit?: number;
    userClasses?: UserClass[];
    tuitionFees?: TuitionFee[];

    constructor(data?: IRegistrationScheduleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.feePerCredit = _data["feePerCredit"];
            if (Array.isArray(_data["userClasses"])) {
                this.userClasses = [] as any;
                for (let item of _data["userClasses"])
                    this.userClasses!.push(UserClass.fromJS(item));
            }
            if (Array.isArray(_data["tuitionFees"])) {
                this.tuitionFees = [] as any;
                for (let item of _data["tuitionFees"])
                    this.tuitionFees!.push(TuitionFee.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RegistrationScheduleResult {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationScheduleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["feePerCredit"] = this.feePerCredit;
        if (Array.isArray(this.userClasses)) {
            data["userClasses"] = [];
            for (let item of this.userClasses)
                data["userClasses"].push(item.toJSON());
        }
        if (Array.isArray(this.tuitionFees)) {
            data["tuitionFees"] = [];
            for (let item of this.tuitionFees)
                data["tuitionFees"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRegistrationScheduleResult {
    id?: number;
    name?: string;
    startDate?: Date;
    endDate?: Date;
    feePerCredit?: number;
    userClasses?: UserClass[];
    tuitionFees?: TuitionFee[];
}

export class CreateRegistrationScheduleCommand implements ICreateRegistrationScheduleCommand {
    name?: string;
    startDate?: string;
    endDate?: string;

    constructor(data?: ICreateRegistrationScheduleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
        }
    }

    static fromJS(data: any): CreateRegistrationScheduleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRegistrationScheduleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        return data;
    }
}

export interface ICreateRegistrationScheduleCommand {
    name?: string;
    startDate?: string;
    endDate?: string;
}

export class UpdateRegistrationScheduleCommand implements IUpdateRegistrationScheduleCommand {
    id?: number;
    name?: string;
    startDate?: string;
    endDate?: string;

    constructor(data?: IUpdateRegistrationScheduleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
        }
    }

    static fromJS(data: any): UpdateRegistrationScheduleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRegistrationScheduleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        return data;
    }
}

export interface IUpdateRegistrationScheduleCommand {
    id?: number;
    name?: string;
    startDate?: string;
    endDate?: string;
}

export class SemesterDto implements ISemesterDto {
    id?: number;
    startYear?: number;
    endYear?: number;
    split?: number;
    registrationSchedules?: RegistrationSchedule[];

    constructor(data?: ISemesterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startYear = _data["startYear"];
            this.endYear = _data["endYear"];
            this.split = _data["split"];
            if (Array.isArray(_data["registrationSchedules"])) {
                this.registrationSchedules = [] as any;
                for (let item of _data["registrationSchedules"])
                    this.registrationSchedules!.push(RegistrationSchedule.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SemesterDto {
        data = typeof data === 'object' ? data : {};
        let result = new SemesterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startYear"] = this.startYear;
        data["endYear"] = this.endYear;
        data["split"] = this.split;
        if (Array.isArray(this.registrationSchedules)) {
            data["registrationSchedules"] = [];
            for (let item of this.registrationSchedules)
                data["registrationSchedules"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISemesterDto {
    id?: number;
    startYear?: number;
    endYear?: number;
    split?: number;
    registrationSchedules?: RegistrationSchedule[];
}

export class CreateSemesterCommand implements ICreateSemesterCommand {
    startYear?: number;
    endYear?: number;
    split?: number;

    constructor(data?: ICreateSemesterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startYear = _data["startYear"];
            this.endYear = _data["endYear"];
            this.split = _data["split"];
        }
    }

    static fromJS(data: any): CreateSemesterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSemesterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startYear"] = this.startYear;
        data["endYear"] = this.endYear;
        data["split"] = this.split;
        return data;
    }
}

export interface ICreateSemesterCommand {
    startYear?: number;
    endYear?: number;
    split?: number;
}

export class UpdateSemesterCommand implements IUpdateSemesterCommand {
    id?: number;
    startYear?: number;
    endYear?: number;
    split?: number;

    constructor(data?: IUpdateSemesterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startYear = _data["startYear"];
            this.endYear = _data["endYear"];
            this.split = _data["split"];
        }
    }

    static fromJS(data: any): UpdateSemesterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSemesterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startYear"] = this.startYear;
        data["endYear"] = this.endYear;
        data["split"] = this.split;
        return data;
    }
}

export interface IUpdateSemesterCommand {
    id?: number;
    startYear?: number;
    endYear?: number;
    split?: number;
}

export class PaginatedListOfTodoItemBriefDto implements IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TodoItemBriefDto implements ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: ITodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): TodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
}

export class CreateTodoItemCommand implements ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;

    constructor(data?: ICreateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listId = _data["listId"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;
}

export class UpdateTodoItemCommand implements IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: IUpdateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): UpdateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;
}

export class UpdateTodoItemDetailCommand implements IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;

    constructor(data?: IUpdateTodoItemDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): UpdateTodoItemDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data;
    }
}

export interface IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;
}

export enum PriorityLevel {
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3,
}

export class TodosVm implements ITodosVm {
    priorityLevels?: LookupDto[];
    lists?: TodoListDto[];

    constructor(data?: ITodosVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["priorityLevels"])) {
                this.priorityLevels = [] as any;
                for (let item of _data["priorityLevels"])
                    this.priorityLevels!.push(LookupDto.fromJS(item));
            }
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(TodoListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodosVm {
        data = typeof data === 'object' ? data : {};
        let result = new TodosVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.priorityLevels)) {
            data["priorityLevels"] = [];
            for (let item of this.priorityLevels)
                data["priorityLevels"].push(item.toJSON());
        }
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITodosVm {
    priorityLevels?: LookupDto[];
    lists?: TodoListDto[];
}

export class LookupDto implements ILookupDto {
    id?: number;
    title?: string | undefined;

    constructor(data?: ILookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): LookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface ILookupDto {
    id?: number;
    title?: string | undefined;
}

export class TodoListDto implements ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[];

    constructor(data?: ITodoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.colour = _data["colour"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["colour"] = this.colour;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[];
}

export class TodoItemDto implements ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;

    constructor(data?: ITodoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): TodoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data;
    }
}

export interface ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;
}

export class CreateTodoListCommand implements ICreateTodoListCommand {
    title?: string | undefined;

    constructor(data?: ICreateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateTodoListCommand {
    title?: string | undefined;
}

export class UpdateTodoListCommand implements IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;

    constructor(data?: IUpdateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;
}

export class UserClassDto implements IUserClassDto {
    id?: number;
    classId?: number;
    registrationScheduleId?: number | undefined;
    passed?: boolean | undefined;

    constructor(data?: IUserClassDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.classId = _data["classId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.passed = _data["passed"];
        }
    }

    static fromJS(data: any): UserClassDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserClassDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["classId"] = this.classId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["passed"] = this.passed;
        return data;
    }
}

export interface IUserClassDto {
    id?: number;
    classId?: number;
    registrationScheduleId?: number | undefined;
    passed?: boolean | undefined;
}

export class AddUserToClassCommand implements IAddUserToClassCommand {
    classId?: number | undefined;
    registrationScheduleId?: number | undefined;
    passed?: boolean;

    constructor(data?: IAddUserToClassCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.classId = _data["classId"];
            this.registrationScheduleId = _data["registrationScheduleId"];
            this.passed = _data["passed"];
        }
    }

    static fromJS(data: any): AddUserToClassCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddUserToClassCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classId"] = this.classId;
        data["registrationScheduleId"] = this.registrationScheduleId;
        data["passed"] = this.passed;
        return data;
    }
}

export interface IAddUserToClassCommand {
    classId?: number | undefined;
    registrationScheduleId?: number | undefined;
    passed?: boolean;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}